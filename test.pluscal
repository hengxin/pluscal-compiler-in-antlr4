--algorithm euclid {
  variables m=30, n=18, u=m, v=n, v_ini=v;
  define {
    Divides(i,j) == \E k \in 0..j : j = i * k
    IsGCD(i,j,k) == Divides(i,j) /\ Divides(i,k) /\ \A r \in 0..j \cup 0..k : Divides(r,j) /\ Divides(r,k) => Divides(r,i)
  }
  procedure p1(v1, v2=2)
  variables v11, v12 = 3;
  {
    r0: assert TRUE;
    r1: call p2(v11, v12, v2);
    goto r0;
    r2: return;
  }

  procedure p2(u1, u2, u3)
  {
    q0: assert TRUE;
    return;
  }

  fair process (p = 1..5) {
    bela: while (u # 0) {
      iff:+ if (u < v)
        u := v || v := u;
      tmp:+ u := u - v;
    };
    print <<m,v_ini,"have gdc",v>>;
    call p1(1,2);
    (* correctness condition *)
    fin: assert IsGCD(v,m,n)
  }

  fair+ process (s \in 1..10) {
    out: assert TRUE;
  }
}